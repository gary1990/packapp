<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2009/07/14/using-the-halo-theme-in-flex-4/ -->
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="1004" height="644" currentState="loginState"
					   initialize="windowedapplication_initializeHandler(event)"
					   backgroundColor.loginState="#EFEDED" creationComplete.loginState="init()"
					   width.packingBagState="1056" height.packingBagState="714"
					   closing.packingBagState="windowedapplication1_closingHandler(event)">
	<fx:Script>
		<![CDATA[
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			
			//TODO 项目部署目录
			[Bindable]
			private var serverName:String = "";
			//TODO 操作系统的路径分割符，发布前改成目标操作系统的分隔符
			[Bindable]
			private var osSlash:String = "/";
			
			[Bindable]
			private var employeeId:String;
			[Bindable]
			private var employeeName:String;
			[Bindable]
			private var employeePassword:String;
			[Bindable]
			private var serverIp:String
			[Bindable]
			private var packProductSn:String;
			[Bindable]
			private var pimState:String;
			//华为文件保存路径
			[Bindable]
			private var HWFilePath:String;
			
			//包装箱号
			[Bindable]
			private var packBoxSn:String;
			//订单号
			[Bindable]
			private var orderNum:String;
			//产品型号
			[Bindable]
			private var productType:String;
			//产品型号数组
			[Bindable]
			private var productTypeArray:ArrayCollection;
			//需要包装总箱数
			[Bindable]
			private var boxtotalNum:int;
			//完成包装的箱数
			[Bindable]
			private var completeboxNum:int = 0;
			//要包装产品总数
			[Bindable]
			private var packTotalNum:int;
			//完成包装的数量
			[Bindable]
			private var completeTotalNum:int = 0;
			//包装箱容量
			[Bindable]
			private var currentBoxContainer:int;
			[Bindable]
			private var orderinfoArray:Array;
			//保存当前包装箱的测试记录的ArrayCollection
			[Bindable]
			private var currBoxResultArray:Array = new Array();
			//当前包装箱的测试记录结果
			[Bindable]
			private var currBoxResultString:String = "";
			//当前测试时间
			[Bindable]
			private var currTestTime:String;
			
			//工单号
			[Bindable]
			private var jobNum:String;
			//厂区
			[Bindable]
			private var factoryId:String;
			//物料名称
			[Bindable]
			private var materialName:String;
			//物料编码
			[Bindable]
			private var materialCode:String;
			//批次号
			[Bindable]
			private var lotCode:String;
			
			private var alrt:Alert;
			private var alrtTimer:Timer;
			private var i:int = 1;
			private var timedelay:Timer = new Timer(500,1);
			
			private var popup:MyPopUpWindow;
			
			private const TRIAL_PERIOD:int = 66; // 试用期天数
			
			// 存储文件路径
			private var trialFile:File = File.documentsDirectory.resolvePath("trial.dat");
			
			// 定义存储结构
			private var trialData:Object = {
				startTime: null,
				lastRunTime: null
			};
			
			
			// 加载或初始化试用数据
			private function loadTrialData():void {
				if (trialFile.exists) {
					var fileStream:FileStream = new FileStream();
					fileStream.open(trialFile, FileMode.READ);
					var content:String = fileStream.readUTF();
					fileStream.close();
					trialData = JSON.parse(content);
				} else {
					// 初始化数据
					trialData.startTime = new Date().time; // 首次运行时间
					trialData.lastRunTime = trialData.startTime;
					saveTrialData();
				}
			}
			
			// 保存试用数据
			private function saveTrialData():void {
				var fileStream:FileStream = new FileStream();
				fileStream.open(trialFile, FileMode.WRITE);
				fileStream.writeUTF(JSON.stringify(trialData));
				fileStream.close();
			}
			
			// 检测试用期是否有效
			private function checkTrialValidity():void {
				var currentTime:Number = new Date().time;
				
				// 检查时间回退
				if (currentTime < trialData.lastRunTime) {
					disableMainWindow();
					showInvalidTrialDialog("检测到系统时间被回退，试用期无效！");
					return;
				}
				
				// 更新上次运行时间
				trialData.lastRunTime = currentTime;
				saveTrialData();
				
				// 检查试用期是否过期
				var daysElapsed:int = (currentTime - trialData.startTime) / (1000 * 60 * 60 * 24);
				if (daysElapsed > TRIAL_PERIOD) {
					disableMainWindow();
					showInvalidTrialDialog("试用期已过！");
				} else {
					if((TRIAL_PERIOD - daysElapsed) >= 0 && (TRIAL_PERIOD - daysElapsed) <= 15) {
						trailDayLeft.text = "试用剩余天数：" + (TRIAL_PERIOD - daysElapsed)
					}
					// Alert.show("试用剩余天数：" + (TRIAL_PERIOD - daysElapsed));
				}
			}
			
			// 显示试用期无效提示框
			private function showInvalidTrialDialog(message:String):void {
				// 创建模式窗口
				var dialogOptions:NativeWindowInitOptions = new NativeWindowInitOptions();
				dialogOptions.systemChrome = NativeWindowSystemChrome.STANDARD;
				dialogOptions.type = NativeWindowType.NORMAL;
				
				var dialog:NativeWindow = new NativeWindow(dialogOptions);
				dialog.title = "试用期无效";
				dialog.width = 400;
				dialog.height = 200;
				dialog.alwaysInFront = true; // 保证窗口在前面
				dialog.stage.align = StageAlign.TOP_LEFT;
				dialog.stage.scaleMode = StageScaleMode.NO_SCALE;
				
				// 添加内容
				var container:Sprite = new Sprite();
				dialog.stage.addChild(container);
				
				// 提示信息
				var textField:TextField = new TextField();
				textField.defaultTextFormat = new TextFormat("Arial", 14, 0x000000);
				textField.autoSize = TextFieldAutoSize.CENTER;
				textField.text = message;
				textField.x = 50;
				textField.y = 50;
				container.addChild(textField);
				
				// 创建确定按钮
				var button:SimpleButton = createButton("确定退出", 100, 30);
				button.x = (dialog.width - button.width) / 2;
				button.y = textField.y + textField.height + 20;
				button.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void {
					dialog.close(); // 关闭模式窗口
					NativeApplication.nativeApplication.exit(); // 退出主程序
				});
				container.addChild(button);
				
				// 模式窗口阻塞
				dialog.activate();
				dialog.addEventListener(Event.CLOSE, function (event:Event):void {
					NativeApplication.nativeApplication.exit(); // 防止用户强制关闭窗口
				});
			}
			
			// 遮罩层变量
			private var blocker:Sprite;
			
			// 禁用主窗口
			private function disableMainWindow():void {
				// 创建遮罩层
				if (!blocker) {
					blocker = new Sprite();
					blocker.graphics.beginFill(0x000000, 0.5); // 半透明黑色
					blocker.graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);
					blocker.graphics.endFill();
					blocker.mouseEnabled = true; // 阻止鼠标事件传递
					blocker.mouseChildren = false;
				}
				
				// 将遮罩层添加到舞台顶层
				stage.addChild(blocker);
			}
			
			
			// 创建一个简单的按钮
			private function createButton(label:String, width:Number, height:Number):SimpleButton {
				var upState:Sprite = new Sprite();
				upState.graphics.beginFill(0xCCCCCC);
				upState.graphics.drawRoundRect(0, 0, width, height, 5, 5);
				upState.graphics.endFill();
				var upLabel:TextField = createButtonLabel(label, 0x000000);
				upLabel.x = (width - upLabel.width) / 2;
				upLabel.y = (height - upLabel.height) / 2;
				upState.addChild(upLabel);
				
				var overState:Sprite = new Sprite();
				overState.graphics.beginFill(0xAAAAAA);
				overState.graphics.drawRoundRect(0, 0, width, height, 5, 5);
				overState.graphics.endFill();
				var overLabel:TextField = createButtonLabel(label, 0x000000);
				overLabel.x = (width - overLabel.width) / 2;
				overLabel.y = (height - overLabel.height) / 2;
				overState.addChild(overLabel);
				
				var downState:Sprite = new Sprite();
				downState.graphics.beginFill(0x888888);
				downState.graphics.drawRoundRect(0, 0, width, height, 5, 5);
				downState.graphics.endFill();
				var downLabel:TextField = createButtonLabel(label, 0xFFFFFF);
				downLabel.x = (width - downLabel.width) / 2;
				downLabel.y = (height - downLabel.height) / 2;
				downState.addChild(downLabel);
				
				return new SimpleButton(upState, overState, downState, upState);
			}
			
			// 创建按钮文字标签
			private function createButtonLabel(label:String, color:uint):TextField {
				var textField:TextField = new TextField();
				textField.defaultTextFormat = new TextFormat("Arial", 12, color, true);
				textField.autoSize = TextFieldAutoSize.LEFT;
				textField.text = label;
				textField.mouseEnabled = false;
				return textField;
			}
			
			// method to open the PopUp Window on creationComplete
			private function showPopUp():void {
				popup = PopUpManager.createPopUp(this,MyPopUpWindow,true) as MyPopUpWindow;
				PopUpManager.centerPopUp(popup);
				//popup.un
			}
			
			//程序启动的初始化
			private function init():void
			{
				var serIpFile:File = File.documentsDirectory.resolvePath("serIp.txt");
				if(serIpFile.exists)
				{
					var serIpFileFs:FileStream = new FileStream();
					serIpFileFs.open(serIpFile,FileMode.READ);
					serverIpInput.text = serIpFileFs.readUTF();
					serIpFileFs.close();
				}
				var HWFilePathFile:File = File.documentsDirectory.resolvePath("HWFilePath.txt");
				if(HWFilePathFile.exists) {
					var HWPathFileFs:FileStream = new FileStream();
					HWPathFileFs.open(HWFilePathFile,FileMode.READ);
					HWFilePathInput.text = HWPathFileFs.readUTF();
					HWPathFileFs.close();
				}
				
//				loadTrialData();
//				checkTrialValidity();
			}
			
			
			//选择华为文件保存路径
			protected function HWPathBtn_clickHandler(event:MouseEvent):void
			{
				var file:File = new File();
				file.browseForDirectory("请选择文件保存路径");
				file.addEventListener(Event.SELECT, HWpathSelected);
			}
			//选择路径监听事件
			protected function HWpathSelected(e:Event):void
			{
				HWFilePathInput.text = e.target.nativePath;
			}
			
			//loginState中登录按钮click事件处理：发送serverConnectService请求
			protected function loginBtn_clickHandler(event:MouseEvent):void
			{
				var tt:String = "aaaa\\//bbb";
				employeeId = employeeIdInput.text;
				employeePassword = employeePasswordInput.text;
				serverIp = serverIpInput.text;
				HWFilePath = HWFilePathInput.text;
				
				var prefsFile:File = File.documentsDirectory.resolvePath("serIp.txt");
				var prefsFileFs:FileStream = new FileStream();
				prefsFileFs.open(prefsFile,FileMode.UPDATE);
				prefsFileFs.writeUTF(serverIp);
				prefsFileFs.close();
				var versionsName:File = File.documentsDirectory.resolvePath("versionsName.txt");
				var versionsNameFs:FileStream = new FileStream();
				versionsNameFs.open(versionsName,FileMode.UPDATE);
				versionsNameFs.writeUTF(versionsNameLabel.text);
				versionsNameFs.close();
				var versionsId:File = File.documentsDirectory.resolvePath("versionsId.txt");
				var versionsIdFs:FileStream = new FileStream();
				versionsIdFs.open(versionsId,FileMode.UPDATE);
				versionsIdFs.writeUTF(versionsIdLabel.text);
				versionsIdFs.close();
				var HWPathFile:File = File.documentsDirectory.resolvePath("HWFilePath.txt");
				var HWPathFileFs:FileStream = new FileStream();
				HWPathFileFs.open(HWPathFile,FileMode.UPDATE);
				HWPathFileFs.writeUTF(HWFilePath);
				HWPathFileFs.close();
				
				
				if(employeeId.length == 0)
				{
					Alert.show("请输入包装员Id！");
				}
				else if(employeePassword.length == 0) 
				{
					Alert.show("请输入包装员密码");
				}
				else if(HWFilePath.length == 0)
				{
					Alert.show("请指定华为文件保存路径");
				}
				else
				{
					serverConnectService.url = "http://"+serverIp+"/"+ serverName +"/index.php/login/packingConnectCheck";
					serverConnectService.send();
				}
			}
			
			//serverConnectService请求的result
			protected function serverConnect_resultHandler(event:ResultEvent):void
			{
				if(event.result.result == "connected")
				{
					serverIpInput.setStyle("borderColor","green");
					packingUserCheckService.url = "http://"+serverIp+"/" + serverName + "/index.php/login/packingUserCheck";
					packingUserCheckService.send();
				}
				else
				{
					Alert.show("对不起！无法访问目标服务器！");
					serverIpInput.setStyle("borderColor","red");
				}
			} 
			
			//serverConnectService请求的faultHandler
			protected function serverConnect_faultHandler(event:FaultEvent):void
			{
				trace(event.toString());
				Alert.show("对不起！无法访问目标服务器！");
				serverIpInput.setStyle("borderColor","red");
			}
			
			//验证包装员的HttpService请求的resultHandler
			protected function packingUserCheckService_resultHandler(event:ResultEvent):void
			{
				if(event.result.result.info == "yes")
				{
					employeeName = event.result.result.employeename;
					employeeIdInput.setStyle("borderColor","black");
					employeePasswordInput.setStyle("borderColor","black");
					currentState = "packingBagState";
				}
				else
				{
					Alert.show(event.result.result.info);
					employeeIdInput.setStyle("borderColor","red");
					employeePasswordInput.setStyle("borderColor","red");
				}
			}
			
			//packingBagState的enter事件处理
			protected function packingBagState_enterStateHandler(event:FlexEvent):void
			{
				currentTime.text = "今天是：";
				var cerrentDate:String = this.getSystemDate();
				currentTime.text = currentTime.text+cerrentDate;
				packinguserName.text = employeeName;
				serverStatus.setStyle("color","green");
				serverStatus.text = "在线";
				orderNumInput.setFocus();
				orderNumInput.text="";
				productSn.text="";
				producttypeComboBox.enabled = false;
				boxSn.text="";
				boxSn.enabled=false;
				boxCountInput.enabled = false;
				boxCountInput.text = "";
				productSn.enabled = false;
				packFailNumLabel.text="";
				packFailSnLabel.text="";
				packFailItemLabel.text="";
				packUntestedNumLabel.text="";
				packUntestedSnLabel.text="";
				packUntestedItemLabel.text="";
				packPassNumLabel.text="";
				packPassSnLabel.text="";
				packPassOrderNumLabel.text="";
				packPassNumLabel.text="";
				packPassSnLabel.text="";
				packPassOrderNumLabel.text="";
				bagFailCount.text="0";
				bagUntestedCount.text="0";
				bagPassCount.text="0";
				checkPimCheckBox.selected = true;
				bagFailContainer.setStyle("backgroundColor","#E6E6E6");
				bagUntestedContainer.setStyle("backgroundColor","#E6E6E6");
				bagPassContainer.setStyle("backgroundColor","#E6E6E6");
				
				//发送productypeHttpService请求，取得产品型号
				productType = "";
				productypeHttpService.url = "http://"+serverIp+"/" + serverName + "/index.php/login/getProducttype";
				productypeHttpService.send();
				
				/*
				var orderinfo:File = File.documentsDirectory.resolvePath("orderInfo.txt");
				if(orderinfo.exists)
				{
					var orderinfoFs:FileStream = new FileStream();
					orderinfoFs.open(orderinfo,FileMode.READ);
					var info:String = orderinfoFs.readUTF();
					orderinfoFs.close();
					orderinfoArray = info.split(",");
					if(orderinfoArray[3] != 0)
					{
						var snd8:Sound = new Sound(new URLRequest("../sound.mp3"));
						snd8.play();
						Alert.show("订单："+orderinfoArray[0]+",已完成："+orderinfoArray[2]+",剩余："+orderinfoArray[3]+"\n"+"尚未完成，是否继续？", '注意', 3, this, ifcontinue);
					}
					else
					{
						//发送productypeHttpService请求，取得产品型号
						productType = "";
						productypeHttpService.url = "http://"+serverIp+"/camel/index.php/login/getProducttype";
						productypeHttpService.send();
					}
				}
				else
				{
					//发送productypeHttpService请求，取得产品型号
					productType = "";
					productypeHttpService.url = "http://"+serverIp+"/camel/index.php/login/getProducttype";
					productypeHttpService.send();
				}
				*/
			}
			/*
			//是否继续订单
			private function ifcontinue(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					orderNumInput.text = orderinfoArray[0];
					producttypeComboBox.selectedItem = orderinfoArray[1];
					boxSn.enabled = true;
					boxSn.setFocus();
				}
				else
				{
					//发送productypeHttpService请求，取得产品型号
					productType = "";
					productypeHttpService.url = "http://"+serverIp+"/camel/index.php/login/getProducttype";
					productypeHttpService.send();
				}
			}
			*/
			//packingProductSnCheckService HTTPService请求的resultHandler
			protected function packingProductSnCheckService_resultHandler(event:ResultEvent):void
			{
				//取得返回结果
				var resultInfo:String = event.result.result.info;
				//取得返回的Json字符串，包含VNA和PIM测试的详细信息，华为要求
				var resultJsonData:String = event.result.result.data;
				//取得返回的测试时间，生成华为json文件时用
				var testTime:String = event.result.result.testtime;
				//华为json文件名称
				var strPattern:RegExp = /[\\\/]/gi;
				var packProductSN: String = packProductSn.replace(strPattern, "-");
				var jsonFileName:String = this.factoryId + "_" + this.materialCode + "_" + packProductSN + "_" + testTime + ".json";
				
				//数据库中存在此序列号的合格品
				if(resultInfo == "exists")
				{
					Alert.show("该产品已经包装完成!");
					productSn.text = "";
				}
				else
				{
					//返回pim有记录的情况
					if(resultInfo == "pimexsit")
					{
						Alert.show('该产品进行过PIM测试，确定不检查PIM测试结果？', '注意', 3, this, checkpimmethod);
					}
					else
					{
						if(resultInfo == "pimresult900null")
						{
							this.pimUntest("900", event, resultJsonData, testTime, jsonFileName);
						} else if(resultInfo == "pimresult1800null") {
							this.pimUntest("1800", event, resultJsonData, testTime, jsonFileName);
						} else if(resultInfo == "pimresultnull") {
							this.pimUntest("900&1800", event, resultJsonData, testTime, jsonFileName);
						}
						else if (resultInfo == "vnaresultnull")
						{
							var snd2:Sound = new Sound(new URLRequest("../sound.mp3"));
							snd2.play();
							bagPassContainer.setStyle("backgroundColor","#E6E6E6");
							bagFailContainer.setStyle("backgroundColor","#E6E6E6");
							bagUntestedContainer.setStyle("backgroundColor","yellow");
							bagUntestedCount.text = (parseFloat(bagUntestedCount.text)+1).toString();
							if(packUntestedNumLabel.text.length == 0)
							{
								packUntestedNumLabel.text = "1";
							}
							else
							{
								packUntestedNumLabel.text = (parseFloat(packUntestedNumLabel.text)+1).toString()+'\n'+packUntestedNumLabel.text;
							}
							if(packUntestedSnLabel.text.length == 0)
							{
								packUntestedSnLabel.text = packProductSn;
							}
							else
							{
								packUntestedSnLabel.text = packProductSn+'\n'+packUntestedSnLabel.text;
							}
							if(packUntestedItemLabel.text.length == 0)
							{
								packUntestedItemLabel.text = "VNA";
							}
							else
							{
								packUntestedItemLabel.text = "VNA"+'\n'+packUntestedItemLabel.text;
							}
							productSn.text="";
							//记录到currBoxResultArray
							currBoxResultArray.push(packProductSn+"untest");
							var resultVnaTagTemp1:String = event.result.result.vnatag;
							//记录到包装记录String
							currBoxResultString += "('"+currTestTime+"','"+packBoxSn+"','"+packProductSn+"','"+orderNum+"','"+employeeId+"','UNTEST','"+resultVnaTagTemp1+"'),";
							this.showPopUp();
						}
						else if(resultInfo == "pimresult1800fail")
						{
							this.pimFail("1800", event, resultJsonData, testTime, jsonFileName);
						}
						else if(resultInfo == "pimresult900fail")
						{
							this.pimFail("900", event, resultJsonData, testTime, jsonFileName);
						}
						else if(resultInfo == "vnaresultfail")
						{
							var snd4:Sound = new Sound(new URLRequest("../sound.mp3"));
							snd4.play();
							bagPassContainer.setStyle("backgroundColor","#E6E6E6");
							bagFailContainer.setStyle("backgroundColor","red");
							bagUntestedContainer.setStyle("backgroundColor","#E6E6E6");
							bagFailCount.text = (parseFloat(bagFailCount.text)+1).toString();
							if(packFailNumLabel.text.length == 0)
							{
								packFailNumLabel.text = "1";
							}
							else
							{
								packFailNumLabel.text = (parseFloat(packFailNumLabel.text)+1).toString()+'\n'+packFailNumLabel.text;
							}
							if(packFailSnLabel.text.length == 0)
							{
								packFailSnLabel.text = packProductSn;
							}
							else
							{
								packFailSnLabel.text = packProductSn+'\n'+packFailSnLabel.text;
							}
							if(packFailItemLabel.text.length == 0)
							{
								packFailItemLabel.text = "VNA";
							}
							else
							{
								packFailItemLabel.text = "VNA"+'\n'+packFailItemLabel.text;
							}
							productSn.text="";	
							//记录到currBoxResultArray
							currBoxResultArray.push(packProductSn+"fail");
							var resultVnaTagTemp3:String = event.result.result.vnatag;
							//记录到包装记录String
							currBoxResultString += "('"+currTestTime+"','"+packBoxSn+"','"+packProductSn+"','"+orderNum+"','"+employeeId+"','FAIL','"+resultVnaTagTemp3+"'),";
							
							
							//保存文件到指定华为目录
							if(resultJsonData && testTime) {
								this.saveStringToFile(resultJsonData, this.HWFilePath, jsonFileName);
							}
						}
						else if(resultInfo == "pass")
						{
							/**/
							bagPassContainer.setStyle("backgroundColor","green");
							bagFailContainer.setStyle("backgroundColor","#E6E6E6");
							bagUntestedContainer.setStyle("backgroundColor","#E6E6E6");	
							
							if(packPassNumLabel.text.length == 0)
							{
								packPassNumLabel.text = '1';
							}
							else
							{
								packPassNumLabel.text = (parseFloat(packPassNumLabel.text)+1).toString()+'\n'+packPassNumLabel.text;
							}
							
							if(packPassSnLabel.text.length == 0)
							{
								packPassSnLabel.text = packProductSn;
							}
							else
							{
								packPassSnLabel.text = packProductSn+'\n'+packPassSnLabel.text;
							}
							
							if(packPassOrderNumLabel.text.length == 0)
							{
								packPassOrderNumLabel.text = orderNum;
							}
							else
							{
								packPassOrderNumLabel.text = orderNum+'\n'+packPassOrderNumLabel.text;
							}
							
							bagPassCount.text = (parseFloat(bagPassCount.text)+1).toString();
							boxCountInput.enabled = false;
							completeTotalNum++;
							packTotalProgressBar.label = "完成数量："+completeTotalNum.toString();
							packTotalProgressBar.setProgress(completeTotalNum,packTotalNum);
							
							productSn.text="";	
							
							//记录到currBoxResultArray
							currBoxResultArray.push(packProductSn+"pass");
							var resultVnaTagTemp4:String = event.result.result.vnatag;
							//记录到包装记录String
							currBoxResultString += "('"+currTestTime+"','"+packBoxSn+"','"+packProductSn+"','"+orderNum+"','"+employeeId+"','PASS','"+resultVnaTagTemp4+"'),";
							
							//包装完成一箱
							if(completeTotalNum%currentBoxContainer == 0)
							{
								completeboxNum++;
								totalboxNumProgressBar.setProgress(completeboxNum,boxtotalNum);
								totalboxNumProgressBar.label = "完成箱数："+completeboxNum.toString();
								//将上一箱的包装记录发送到服务器，插入数据库
								recordHttpService.url = "http://"+serverIp+"/" + serverName + "/index.php/login/insertPackResult";
								recordHttpService.send();

								//包装完成所有箱
								if(completeboxNum == boxtotalNum)
								{
									totalboxInput.text = "";
									boxCountInput.text = "";
									orderNumInput.text = "";
									producttypeComboBox.selectedIndex = -1;
									totalboxInput.enabled = true;
									orderNumInput.enabled = true;
									orderNumInput.setFocus();
									
									totalboxNumProgressBar.label = "完成箱数：0";
									totalboxNumProgressBar.setProgress(0,boxtotalNum);
									packTotalProgressBar.label = "完成数量：0";
									packTotalProgressBar.setProgress(0,packTotalNum);
									packTotalProgressBar.label = "完成数量：0";
									completeTotalNum = 0;
									packTotalNum = 0;
									completeboxNum = 0;
									boxtotalNum = 0;
									productSn.enabled = false;
								}
							}
							productSn.text = "";
							
							//保存文件到指定华为目录
							if(resultJsonData && testTime) {
								this.saveStringToFile(resultJsonData, this.HWFilePath, jsonFileName);
							}
						} else if(resultInfo == "producttypenull") {
							var sndtypenull:Sound = new Sound(new URLRequest("../sound.mp3"));
							sndtypenull.play();
							Alert.show("未找到当前条码对应的编码，请确认产品是否已经测试。");
							this.showPopUp();
						}
						else
						{
							var snd5:Sound = new Sound(new URLRequest("../sound.mp3"));
							snd5.play();
							var pde:String = event.result.result.info;
							Alert.show("产品型号错误"+"\n"+"产品序列号："+packProductSn+"\n"+"产品型号："+pde+"\n"+"设定型号："+productType);
						}
					}
				}
			}
			
			
			
			//产品序列号TextInput的enter事件处理
			protected function productSn_enterHandler(event:FlexEvent):void
			{
				var productSntimer:Timer = new Timer(500,1);
				productSntimer.start();
				productSntimer.addEventListener(TimerEvent.TIMER_COMPLETE,productSntimerTimeout);
			}
			
			protected function productSntimerTimeout(event:TimerEvent):void 
			{
				packProductSn = productSn.text;
				//var strPattern:RegExp = /[\\\/]/gi;
				//Alert.show(packProductSn.replace(strPattern, "-"));
				orderNum = orderNumInput.text;
				packBoxSn = boxSn.text;
				employeeName = employeeIdInput.text;
				productType = producttypeComboBox.selectedItem;
				
				jobNum = this.jobNumInput.text;
				factoryId = factoryIdInput.text;
				materialName = this.materielNameInput.text;
				materialCode = this.materielNumInput.text;
				if(StringUtil.trim(jobNum) == "") {
					Alert.show("工单不能为空");
					return;
				}
				if(StringUtil.trim(factoryId) == "") {
					Alert.show("厂区不能为空");
					return;
				}
				if(StringUtil.trim(materialName) == "") {
					Alert.show("物料名称不能为空");
					return;
				}
				if(StringUtil.trim(materialCode) == "") {
					Alert.show("物料代码不能为空");
					return;
				}
				//测试时间
				var CurrentDateTime:Date = new Date();
				var CurrentDF:DateFormatter = new DateFormatter();
				CurrentDF.formatString = "YYYY-MM-DD HH:NN:SS";
				currTestTime = CurrentDF.format(CurrentDateTime);

				//判断当前包装箱记录里是否包含该序列号的合格品
				var findIndex:int = currBoxResultArray.indexOf(packProductSn+"pass");
				if(findIndex != -1)
				{
					Alert.show("该产品已经包装完成!");
					productSn.text = "";
				}
				else
				{
					packingProductSnCheckService.url = "http://"+serverIp+"/" + serverName + "/index.php/login/packingProductSnCheck";
					if(packProductSn.length == 0)
					{
						//do noting
					}
					else
					{
						if(!checkPimCheckBox.selected)
						{
							pimState = "pimuncheck";	
						}
						else
						{
							pimState = "pimcheck";
						}
						packingProductSnCheckService.send();
					}
				}
			}			
			//弹出询问PIM是否测试的询问框的用户选择的结果处理
			private function checkpimmethod(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					pimState = "ignore";
					packingProductSnCheckService.url="http://"+serverIp+"/" + serverName + "/index.php/login/packingProductSnCheck";
					packingProductSnCheckService.send();
				}
				else
				{
					checkPimCheckBox.selected = true;
					pimState = "pimcheck";
					packingProductSnCheckService.url="http://"+serverIp+"/" + serverName + "/index.php/login/packingProductSnCheck";
					packingProductSnCheckService.send();
				}
			}			
			
			
			//退出程序时当前检测当前订单进度		
			protected function windowedapplication1_closingHandler(event:Event):void
			{
				if(completeTotalNum == 0 && currentBoxContainer == 0) {
					return;
				}
				if(completeTotalNum%currentBoxContainer != 0) 
				{
					var snd7:Sound = new Sound(new URLRequest("../sound.mp3"));
					snd7.play();
					Alert.show("当前包装箱尚未完成，请完成后退出！");
					event.preventDefault();
				}
				else
				{
					if(completeboxNum != boxtotalNum)
					{
						var snd8:Sound = new Sound(new URLRequest("../sound.mp3"));
						snd8.play();
						Alert.show("订单："+orderNumInput.text+",总箱数："+boxtotalNum+",完成箱数："+completeboxNum+"\n剩余箱数"+(boxtotalNum-completeboxNum)+",尚未完成,退出?", '注意', 3, this, selectExit);
						event.preventDefault();
					}
				}
				
				/*
				if(productSn.text.length != 0)
				{
					var snd6:Sound = new Sound(new URLRequest("../sound.mp3"));
					snd6.play();
					Alert.show("当前产品未装袋，请完成！");
					event.preventDefault();
				}
				else
				{
					
					if(parseFloat(lastNum.text) != 0)
					{
						var snd7:Sound = new Sound(new URLRequest("../sound.mp3"));
						snd7.play();
						Alert.show("订单："+orderNumInput.text+",已完成："+finishNum.text+",剩余："+lastNum.text+"\n"+"尚未完成，是否继续？", '注意', 3, this, selectExit);
						event.preventDefault();
					}
					else
					{
						var orderInfo:File = File.documentsDirectory.resolvePath("orderInfo.txt");
						var oderInfoFs:FileStream = new FileStream();
						oderInfoFs.open(orderInfo,FileMode.WRITE);
						oderInfoFs.writeUTF("0,0,0,0");
						oderInfoFs.close();
					}
				}
				*/
			}
			//是否继续订单
			private function selectExit(event:CloseEvent):void
			{
				if(event.detail == Alert.NO)
				{
					
				}
				else
				{
					/*
					var orderNum:String = orderNumInput.text;
					var proType:String = producttypeComboBox.selectedItem;
					
					var orderInfo:File = File.documentsDirectory.resolvePath("orderInfo.txt");
					var oderInfoFs:FileStream = new FileStream();
					oderInfoFs.open(orderInfo,FileMode.WRITE);
					oderInfoFs.close();
					*/
					NativeApplication.nativeApplication.exit();
				}
			}	
			//packingUserCheckService请求异常时的处理
			protected function packingUserCheckService_faultHandler(event:FaultEvent):void
			{
				Alert.show("服务器连接异常！");
			}
			
			protected function packingProductSnCheckService_faultHandler(event:FaultEvent):void
			{
				//Alert.show("服务器连接异常！");
				i = 1;
				alrt = Alert.show("正在重新连接服务器，请稍后或退出程序。"+'\n'+"第"+i+"次连接", "注意", Alert.OK, this, alrt_close);
				offlineConnect.url = "http://"+serverIp+"/" + serverName + "/index.php/login/packingConnectCheck";
				offlineConnect.send();
				alrtTimer.reset();
				alrtTimer.start();
				//Alert.show("服务器连接异常！");
				serverStatus.text="离线";
				serverStatus.setStyle("color","red");
			}
			
			//包装袋输入框的enter事件
			protected function boxSn_enterHandler(event:FlexEvent):void
			{
				var timedelay2:Timer = new Timer(500,1);
				timedelay2.start();
				timedelay2.addEventListener(TimerEvent.TIMER_COMPLETE,timedelay1Out);
			}
			protected function timedelay1Out(e:TimerEvent):void
			{
				if(boxSn.text.length == 0)
				{
					//do noting
				}
				else
				{
					productSn.enabled = true;
					productSn.setFocus();
					boxSn.enabled = true;
				}
			}
			
			//取得系统时间
			protected function getSystemDate():String
			{
				var dt:Date = new Date();
				var currentDate:String;
				currentDate = dt.getFullYear().toString()+"年"+(dt.getMonth()+1).toString()+"月"+dt.dateUTC.toString()+"日";
				var day:int = dt.getDay();
				switch(day)
				{
					case 0:
						currentDate+=" 星期日";
						break;
					case 1:
						currentDate+=" 星期一";
						break;
					case 2:
						currentDate+=" 星期二";
						break;
					case 3:
						currentDate+=" 星期三";
						break;
					case 4:
						currentDate+=" 星期四";
						break;
					case 5:
						currentDate+=" 星期五";
						break;
					case 6:
						currentDate+=" 星期六";
						break;
					default:
						break;
				}
				currentDate+="，祝您工作愉快！"
				return currentDate;
			}
			
			
			protected function alrt_close(event:CloseEvent):void
			{
				alrtTimer.stop();
				currentState = "loginState";
			}
			
			protected function windowedapplication_initializeHandler(event:FlexEvent):void
			{
				alrtTimer = new Timer(5000, 1);
				alrtTimer.addEventListener(TimerEvent.TIMER_COMPLETE, removeAlert);
			}
			
			private function removeAlert(event:TimerEvent):void
			{
				PopUpManager.removePopUp(alrt);
				i = i+1;
				alrt = Alert.show("正在重新连接服务器，请稍后或退出程序。"+'\n'+"第"+i+"次连接", "注意", Alert.OK, this, alrt_close);
				offlineConnect.url = "http://"+serverIp+"/" + serverName + "/index.php/login/packingConnectCheck";
				offlineConnect.send();
				alrtTimer.reset();
				alrtTimer.start();
			}
			
			protected function offlineConnect_resultHandler(event:ResultEvent):void
			{
				if(event.result.result == "connected")
				{
					PopUpManager.removePopUp(alrt);
					alrtTimer.stop();
					serverStatus.text="在线";
					serverStatus.setStyle("color","green");
				}
			}
			
			protected function offlineConnect_faultHandler(event:FaultEvent):void
			{
				
			}
			//定单号输入框的enter事件
			protected function orderNumInput_enterHandler(event:FlexEvent):void
			{
				var orderNumInputTimer:Timer = new Timer(500,1);
				orderNumInputTimer.start();
				orderNumInputTimer.addEventListener(TimerEvent.TIMER_COMPLETE,orderNumInputTimerTimeOut);
			}
			protected function orderNumInputTimerTimeOut(event:TimerEvent):void
			{
				//判断是否为空
				var p:RegExp = /\s/g;
				var odernum:String = orderNumInput.text;
				odernum = odernum.replace(p,"");
				if(odernum.length == 0)
				{
					Alert.show("请正确输入订单号！");
				}
				else
				{
					//发送productypeHttpService请求，取得产品型号
					productType = "";
					productypeHttpService.url = "http://"+serverIp+"/" + serverName + "/index.php/login/getProducttype";
					productypeHttpService.send();
					producttypeComboBox.enabled = true;
					producttypeComboBox.setFocus();
				}
			}
			
			//厂区输入框enter事件
			protected function factoryIdInput_enterHandler(event:FlexEvent):void
			{
				var factoryIdTimer:Timer = new Timer(500,1);
				factoryIdTimer.start();
				factoryIdTimer.addEventListener(TimerEvent.TIMER_COMPLETE, factoryIdTimerTimeout);
			}
			protected function factoryIdTimerTimeout(event:TimerEvent):void
			{
				if(StringUtil.trim(factoryIdInput.text) == "") {
					Alert.show("请输入厂区");
				} else {
					this.factoryId = this.factoryIdInput.text;
					materielNameInput.setFocus();
				}	
			}
			
			//物料名称输入框enter事件
			protected function materielNameInput_enterHandler(e:FlexEvent):void {
				var materielNameTimer:Timer = new Timer(500,1);
				materielNameTimer.start();
				materielNameTimer.addEventListener(TimerEvent.TIMER_COMPLETE, materielNameTimerTimeout);
			}
			protected function materielNameTimerTimeout(e:TimerEvent):void {
				if(StringUtil.trim(materielNameInput.text) == "") {
					Alert.show("请输入物料名称");
				} else {
					this.materialName = this.materielNameInput.text;
					materielNumInput.setFocus();
				}
			}
			
			//物料代码输入框enter事件
			protected function materielNumInput_enterHandler(e:FlexEvent):void {
				var materielNumTimer:Timer = new Timer(500,1);
				materielNumTimer.start();
				materielNumTimer.addEventListener(TimerEvent.TIMER_COMPLETE, materielNumTimerTimeout);
			}
			protected function materielNumTimerTimeout(e:TimerEvent):void {
				if(StringUtil.trim(materielNumInput.text) == "") {
					Alert.show("请输入物料代码");
				} else {
					this.materialCode = this.materielNumInput.text;
					this.lotCodeInput.setFocus();
				}
			}
			
			//批次号输入框enter事件
			protected function lotCodeInput_enterHandler(e: FlexEvent):void {
				var lotNumTimer:Timer = new Timer(500,1);
				lotNumTimer.start();
				lotNumTimer.addEventListener(TimerEvent.TIMER_COMPLETE, lotNumTimerTimeout);
			}
			protected function lotNumTimerTimeout(e: TimerEvent):void {
				if(StringUtil.trim(lotCodeInput.text) == "") {
					Alert.show("请输入批次号");
				} else {
					this.lotCode = this.lotCodeInput.text;
					jobNumInput.setFocus();
				}
			}
			
			//工单号输入框enter事件
			protected function jobNumInput_enterHandler(e:FlexEvent):void {
				var jobNumTimer:Timer = new Timer(500,1);
				jobNumTimer.start();
				jobNumTimer.addEventListener(TimerEvent.TIMER_COMPLETE, jobNumTimerTimeout);
			}
			protected function jobNumTimerTimeout(e:TimerEvent):void {
				if(StringUtil.trim(jobNumInput.text) == "") {
					Alert.show("请输入工单号");
				} else {
					this.jobNum = this.jobNumInput.text;
					totalboxInput.setFocus();
				}
			}
			
			//箱子容量输入框的enters事件
			protected function boxCountInput_enterHandler(event:FlexEvent):void
			{
				//箱子容量
				var boxContainer:Number = Number(boxCountInput.text);
				if(boxCountInput.text == "" || boxCountInput.text.length == 0 || isNaN(boxContainer))
				{
					Alert.show("请输入正确的箱子容量！");
				}
				else
				{
					//当前箱子容量
					currentBoxContainer = boxContainer;
					boxSn.enabled = true;
					boxSn.setFocus();
					boxCountInput.enabled = false;
					//需要包装产品总数
					packTotalNum = boxContainer*Number(totalboxInput.text);
					completeTotalNum = 0;
					packTotalProgressBar.setProgress(0,packTotalNum);
				}
			}
			//重置按钮的点击事件
			protected function resetBtn_clickHandler(event:MouseEvent):void
			{
				Alert.show('确定重置？当前包装箱记录将被清空。', '注意', 3, this, packingBoxReset);
			}
			//由重置按钮引发的对话框的处理事件
			private function packingBoxReset(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					orderNumInput.enabled = true;
					orderNumInput.text = "";
					orderNumInput.setFocus();
					this.materielNameInput.text = "";
					this.materielNumInput.text = "";
					this.factoryIdInput.text = "";
					this.jobNumInput.text = "";
					this.lotCodeInput.text = "";
					boxSn.text = "";
					producttypeComboBox.selectedIndex = -1;
					totalboxInput.text = "";
					totalboxInput.enabled = true;
					totalboxNumProgressBar.label = "完成箱数：0";
					totalboxNumProgressBar.setProgress(0,boxtotalNum);
					packTotalProgressBar.label = "完成数量：0";
					packTotalProgressBar.setProgress(0,packTotalNum);
					boxtotalNum = 0;
					completeboxNum = 0;
					packTotalNum = 0;
					completeTotalNum = 0;
					productSn.text="";
					boxCountInput.enabled = false;
					boxCountInput.text = "";
					productSn.enabled = false;
					packFailNumLabel.text="";
					packFailSnLabel.text="";
					packFailItemLabel.text="";
					packUntestedNumLabel.text="";
					packUntestedSnLabel.text="";
					packUntestedItemLabel.text="";
					packPassNumLabel.text="";
					packPassSnLabel.text="";
					packPassOrderNumLabel.text="";
					packPassNumLabel.text="";
					packPassSnLabel.text="";
					packPassOrderNumLabel.text="";
					bagFailCount.text="0";
					bagUntestedCount.text="0";
					bagPassCount.text="0";
					checkPimCheckBox.selected = true;
					bagPassContainer.setStyle("backgroundColor","#E6E6E6");
					bagFailContainer.setStyle("backgroundColor","#E6E6E6");
					bagUntestedContainer.setStyle("backgroundColor","#E6E6E6");
					//清空保存当前包装箱的记录的数组和string
					currBoxResultArray = new Array();
					currBoxResultString = "";
				}
			}
			//成功获取产品类型时执行方法
			protected function productypeHttpService_resultHandler(event:ResultEvent):void
			{
				var producttypeString:String = event.result.toString();
				var producttype:Array = producttypeString.split(",");
				productTypeArray = new ArrayCollection(producttype);
			}
			//获取产品类型不成功时执行方法
			protected function productypeHttpService_faultHandler(event:FaultEvent):void
			{
				Alert.show("获取产品类型失败");
			}
			//总产品数量输入框获得焦点事件
			protected function totalNumInput_focusInHandler(event:FocusEvent):void
			{
				if(producttypeComboBox.selectedItem == "")
				{
					producttypeComboBox.setFocus();
					Alert.show("请选择产品型号");
				}
				else
				{
				}
			}
			/*
			//总产品数量输入框enter事件
			protected function totalNumInput_enterHandler(event:FlexEvent):void
			{
				var totalContainer:Number = Number(totalNumInput.text);
				if(totalNumInput.text == "" || totalNumInput.text.length == 0 || isNaN(totalContainer))
				{
					Alert.show("请输入正确的数量！");
				}
				else
				{
					boxSn.enabled = true;
					boxSn.setFocus();
					totalNum = parseFloat(totalNumInput.text);
				
				}	
			}
			*/
			//产品型号下拉列表的change事件
			protected function producttypeComboBox_changeHandler(event:IndexChangeEvent):void
			{
				
			}
			//产品型号下拉框失去焦点事件
			protected function producttypeComboBox_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				var producttype:String = producttypeComboBox.selectedItem;
				if(productTypeArray.contains(producttype) && producttype != "")
				{
					
				}
				else
				{
					Alert.show("无此产品型号，请重输入或选择");
				}
			}	
			//总箱数输入框的enter时间
			protected function totalboxInput_enterHandler(event:FlexEvent):void
			{
				var totalBox:Number = Number(totalboxInput.text);
				if(totalboxInput.text == "" || totalboxInput.text.length == 0 || isNaN(totalBox))
				{
					Alert.show("请输入正确的数量！");
				}
				else
				{
					boxCountInput.enabled = true;
					boxCountInput.setFocus();
					boxtotalNum = totalBox;
					completeboxNum = 0;
					totalboxNumProgressBar.label = "完成箱数：0";
					totalboxNumProgressBar.setProgress(completeboxNum,boxtotalNum);
					totalboxInput.enabled = false;
				} 
			}
			
			//插入记录http请求成功返回方法
			protected function recordHttpService_resultHandler(event:ResultEvent):void
			{
				var resultInfo:String = event.result.result.info;
				//重新初始化保存测试记录的数组和string
				currBoxResultArray = new Array();
				currBoxResultString = "";
			}
			//插入记录http请求失败返回方法
			protected function recordHttpService_faultHandler(event:FaultEvent):void
			{
				currBoxResultArray = new Array();
				currBoxResultString = "";
				Alert.show("抱歉！本箱包装记录未能保存到数据库，请重新包装此箱。");
			}
			
			//保存json文件到指定目录
			protected function saveStringToFile(str:String, destinationPath:String, fileNameToSave:String): void 
			{
				var writeStream:FileStream = new FileStream();
				try {
					writeStream.open(new File(destinationPath + this.osSlash + fileNameToSave), FileMode.WRITE);
					writeStream.writeMultiByte(str, "UTF-8");
				} catch (e:Error) {
					Alert.show("保存华为Json文件失败！");
				} finally {
					
					writeStream.close();
				}
			}
			
			//PIM未测试
			protected function pimUntest(freq:String, event:ResultEvent, resultJsonData:String, testTime:String, jsonFileName:String): void {
				var snd1:Sound = new Sound(new URLRequest("../sound.mp3"));
				snd1.play();
				bagPassContainer.setStyle("backgroundColor","#E6E6E6");
				bagFailContainer.setStyle("backgroundColor","#E6E6E6");
				bagUntestedContainer.setStyle("backgroundColor","yellow");
				bagUntestedCount.text = (parseFloat(bagUntestedCount.text)+1).toString();
				if(packUntestedNumLabel.text.length == 0)
				{
					packUntestedNumLabel.text = "1";
				}
				else
				{
					packUntestedNumLabel.text = (parseFloat(packUntestedNumLabel.text)+1).toString()+'\n'+packUntestedNumLabel.text;
				}
				if(packUntestedSnLabel.text.length == 0)
				{
					packUntestedSnLabel.text = packProductSn;
				}
				else
				{
					packUntestedSnLabel.text = packProductSn+'\n'+packUntestedSnLabel.text;
				}
				if(packUntestedItemLabel.text.length == 0)
				{
					packUntestedItemLabel.text = "PIM " + freq;
				}
				else
				{
					packUntestedItemLabel.text = "PIM "+freq+'\n'+packUntestedItemLabel.text;
				}
				productSn.text="";
				//记录到currBoxResultArray
				currBoxResultArray.push(packProductSn+"untest");
				var resultVnaTagTemp:String = event.result.result.vnatag;
				//记录到包装记录String
				currBoxResultString += "('"+currTestTime+"','"+packBoxSn+"','"+packProductSn+"','"+orderNum+"','"+employeeId+"','UNTEST','"+resultVnaTagTemp+"'),";
				
				//保存文件到指定华为目录
				if(resultJsonData && testTime) {
					this.saveStringToFile(resultJsonData, this.HWFilePath, jsonFileName);
				}
				this.showPopUp();
			}
			
			//PIM测试失敗
			protected function pimFail(freq:String, event:ResultEvent, resultJsonData:String, testTime:String, jsonFileName:String): void {
				var snd3:Sound = new Sound(new URLRequest("../sound.mp3"));
				snd3.play();
				bagPassContainer.setStyle("backgroundColor","#E6E6E6");
				bagFailContainer.setStyle("backgroundColor","red");
				bagUntestedContainer.setStyle("backgroundColor","#E6E6E6");
				bagFailCount.text = (parseFloat(bagFailCount.text)+1).toString();
				if(packFailNumLabel.text.length == 0)
				{
					packFailNumLabel.text = "1";
				}
				else
				{
					packFailNumLabel.text = (parseFloat(packFailNumLabel.text)+1).toString()+'\n'+packFailNumLabel.text;
				}
				if(packFailSnLabel.text.length == 0)
				{
					packFailSnLabel.text = packProductSn;
				}
				else
				{
					packFailSnLabel.text = packProductSn+'\n'+packFailSnLabel.text;
				}
				if(packFailItemLabel.text.length == 0)
				{
					packFailItemLabel.text = "PIM " + freq;
				}
				else
				{
					packFailItemLabel.text = "PIM "+ freq +'\n'+packFailItemLabel.text;
				}
				productSn.text="";
				//记录到currBoxResultArray
				currBoxResultArray.push(packProductSn+"fail");
				var resultVnaTagTemp2:String = event.result.result.vnatag;
				//记录到包装记录String
				currBoxResultString += "('"+currTestTime+"','"+packBoxSn+"','"+packProductSn+"','"+orderNum+"','"+employeeId+"','FAIL','"+resultVnaTagTemp2+"'),";
				
				//保存文件到指定华为目录
				if(resultJsonData && testTime) {
					this.saveStringToFile(resultJsonData, this.HWFilePath, jsonFileName);
				}
				this.showPopUp();
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="loginState"/>
		<s:State name="packingBagState" enterState="packingBagState_enterStateHandler(event)"/>
	</s:states>
	<fx:Declarations>
		<s:HTTPService id="serverConnectService"
					   url=""
					   resultFormat="object"
					   result="serverConnect_resultHandler(event)"
					   fault="serverConnect_faultHandler(event)"/>
		<s:HTTPService id="offlineConnect"
					   url=""
					   resultFormat="object"
					   result="offlineConnect_resultHandler(event)"
					   fault="offlineConnect_faultHandler(event)"/>
		<s:HTTPService id="packingUserCheckService"
					   url=""
					   method="POST"
					   result="packingUserCheckService_resultHandler(event)"
					   fault="packingUserCheckService_faultHandler(event)">	
			<s:request xmlns="">
				<packinguserid>
					{employeeId}
				</packinguserid>
				<packinguserpassword>
					{employeePassword}
				</packinguserpassword>
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="packingProductSnCheckService"
					   url=""
					   method="POST"
					   result="packingProductSnCheckService_resultHandler(event)"
					   fault="packingProductSnCheckService_faultHandler(event)">
			<s:request xmlns="">
				<productsn>
					{packProductSn}
				</productsn>
				<producttype>
					{productType}
				</producttype>
				<pimstate>
					{pimState}
				</pimstate>
				<packer>
					{employeeName}
				</packer>
				<ordernum>
					{orderNum}
				</ordernum>
				<boxsn>
					{packBoxSn}
				</boxsn>
				<jobNum>
					{jobNum}
				</jobNum>
				<factoryId>
					{factoryId}
				</factoryId>
				<materialName>
					{materialName}
				</materialName>
				<materialCode>
					{materialCode}
				</materialCode>
				<lotCode>
					{lotCode}
				</lotCode>
			</s:request>
		</s:HTTPService>
		<s:HTTPService  id="productypeHttpService"
						url=""
						method="POST"
					    result.packingBagState="productypeHttpService_resultHandler(event)"
					    fault.packingBagState="productypeHttpService_faultHandler(event)">
			<s:request xmlns="">
				<producttype>
					{productType}
				</producttype>
			</s:request>
		</s:HTTPService>
		
		<s:HTTPService  id="recordHttpService"
						url=""
						method="POST"
						result.packingBagState="recordHttpService_resultHandler(event)"
						fault.packingBagState="recordHttpService_faultHandler(event)">
			<s:request xmlns="">
				<recordstring>
					{currBoxResultString}
				</recordstring>
			</s:request>
		</s:HTTPService>
	</fx:Declarations>
	<s:Label id="versionsNameLabel" includeIn="loginState,packingBagState" x="0" y="0" width="1003"
			 height="55" backgroundColor="#011641" color="#B8E9FF" fontFamily="Rockwell Extra Bold"
			 fontSize="20" fontWeight="bold" paddingLeft="10" paddingTop="30" text="Camel包装检查程序"
			 width.packingBagState="1056"/>
	<s:Label id="versionsIdLabel" includeIn="loginState,packingBagState" x="0" y="53" width="1003"
			 height="23" backgroundColor="#011641" color="#B8E9FF" paddingRight="5" text="版本  1.3.0"
			 textAlign="right"
			 text.loginState="版本  1.5.6"
			 width.packingBagState="1056" text.packingBagState="版本  1.5.6"/>
	<s:Label includeIn="loginState" x="355" y="252" fontFamily="Arial" fontSize="13" text="工号"/>
	<s:TextInput id="employeeIdInput" 
				 includeIn="loginState" 
				 x="441" y="246" width="200" height="30"/>
	<s:TextInput id="employeePasswordInput" includeIn="loginState" x="441" y="292" width="200"
				 height="30" displayAsPassword="true"/>
	<s:TextInput id="serverIpInput" 
				 includeIn="loginState" 
				 x="441" y="344" width="200" height="28"/>
	<s:TextInput id="HWFilePathInput" includeIn="loginState" x="441" y="394" width="200" height="28"
				 enabled="false"/>
	<s:Label x="355" y="299" 
			 includeIn="loginState" fontSize="13" 
			 text="密码"/>
	<s:Label x="355" y="349" 
			 includeIn="loginState" fontSize="13" 
			 text="服务器"/>
	<s:Label includeIn="loginState" x="340" y="407" fontSize="13" text="华为上传目录"/>
	<s:Button id="loginBtn" 
			  includeIn="loginState" 
			  x="576" y="447" width="66" height="25" 
			  label="登录"
			  click="loginBtn_clickHandler(event)"/>
	<s:Button id="HWPathButton" includeIn="loginState" x="650" y="397" width="66" height="25" label="选择..."
			  click="HWPathBtn_clickHandler(event)"/>
	<s:Label includeIn="loginState,packingBagState" x="452" y="522" fontSize="12"
			 text="版权所有©上海瑗环电子科技有限公司"
			 x.loginState="404" y.loginState="551"
			 x.packingBagState="424" y.packingBagState="658"/>
	<s:Label id="packinguserName" includeIn="packingBagState" x="109" y="93" fontSize="12"
			 text="Label"/>
	<s:Label includeIn="packingBagState" x="62" y="92" fontSize="12" text="您好！"/>
	<s:Label id="serverStatus" includeIn="packingBagState" x="956" y="89" width="47" fontSize="12"
			 fontWeight="bold" text="Label"/>
	<s:Label includeIn="packingBagState" x="40" y="107" width="965" color="#C0B9B9"
			 text="_________________________________________________________________________________________________________________________________________"/>
	<s:Label includeIn="packingBagState" x="40" y="232" width="967" color="#B7B2B2"
			 text="_________________________________________________________________________________________________________________________________________"/>
	<s:Label includeIn="packingBagState" x="39" y="285" width="968" color="#A19D9D"
			 text="_________________________________________________________________________________________________________________________________________"/>
	<s:Label includeIn="packingBagState" x="66" y="313" fontSize="12" text="产品 SN："/>
	<s:Label includeIn="packingBagState" x="329" y="264" fontSize="12" text="包装箱：&#xd;"/>
	<s:TextInput id="productSn"
				 includeIn="packingBagState" 
				 x="130" y="309" width="503"
				 enter="productSn_enterHandler(event)"/>
	<s:TextInput id="boxSn"
				 includeIn="packingBagState" x="382" y="260" width="250"
				 enter="boxSn_enterHandler(event)"
				 />
	<s:BorderContainer id="bagPassContainer" 
					   includeIn="packingBagState" 
					   x="59" y="358" width="579" height="38"
					   backgroundColor="#E6E6E6">
		<s:Label x="224" y="15" fontWeight="bold" text="产品数："/>
		<s:Label id="bagPassCount" x="276" y="16" width="55" text="0"/>
	</s:BorderContainer>
	<s:BorderContainer id="bagFailContainer" includeIn="packingBagState" x="655" y="360" width="348" height="26"
					   backgroundColor="#E6E6E6">
		<s:Label x="127" y="7" fontWeight="bold" text="不合格品："/>
		<s:Label id="bagFailCount" x="186" y="8" width="45" text="0"/>
	</s:BorderContainer>
	<s:BorderContainer id="bagUntestedContainer" includeIn="packingBagState" x="655" y="505" width="348" height="26"
					   backgroundColor="#E6E6E6">
		<s:Label x="128" y="7" fontWeight="bold" text="未测试："/>
		<s:Label id="bagUntestedCount" x="176" y="8" width="48" text="0"/>
	</s:BorderContainer>
	<s:BorderContainer includeIn="packingBagState" x="59" y="395" width="579" height="240">
		<s:Label x="1" y="10" fontWeight="bold" text="序号"/>
		<s:Label x="38" y="10" fontWeight="bold" text="产品序列号"/>
		<s:Label x="302" y="10" fontWeight="bold" text="订单号"/>
		<s:Scroller x="0" y="30" width="578" height="208">
			<s:Group width="100%" height="100%">
				<s:Label id="packPassNumLabel" x="0" y="0" width="36" fontSize="10"/>
				<s:Label id="packPassSnLabel" x="37" y="0" width="267" fontSize="10" textAlign="left"/>
				<s:Label id="packPassOrderNumLabel" x="304" y="0" width="267" fontSize="10"
						 textAlign="left"/>
			</s:Group>
		</s:Scroller>
	</s:BorderContainer>
	<s:BorderContainer includeIn="packingBagState" x="655" y="385" width="348" height="101">
		<s:Label x="11" y="7" fontWeight="bold" text="序号"/>
		<s:Label x="44" y="7" fontWeight="bold" text="产品序列号"/>
		<s:Label x="263" y="7" fontWeight="bold" text="不合格项"/>
		<s:Scroller x="0" y="27" width="348" height="73">
			<s:Group width="100%" height="100%">
				<s:Label id="packFailNumLabel" x="10" y="0" width="35" fontSize="10"/>
				<s:Label id="packFailSnLabel" x="44" y="0" width="218" fontSize="10"/>
				<s:Label id="packFailItemLabel" x="264" y="0" width="84" fontSize="10"/>
			</s:Group>
		</s:Scroller>
	</s:BorderContainer>
	<s:BorderContainer includeIn="packingBagState" x="655" y="530" width="348" height="105">
		<s:Label x="12" y="4" fontWeight="bold" text="序号"/>
		<s:Label x="264" y="4" fontWeight="bold" text="未测试项"/>
		<s:Label x="44" y="4" fontWeight="bold" text="产品序列号"/>
		<s:Scroller x="0" y="20" width="346" height="86">
			<s:Group width="100%" height="100%">
				<s:Label id="packUntestedNumLabel" x="10" y="0" width="35" fontSize="10"/>
				<s:Label id="packUntestedSnLabel" x="44" y="0" width="214" fontSize="10"/>
				<s:Label id="packUntestedItemLabel" x="264" y="0" width="82" fontSize="10"/>
			</s:Group>
		</s:Scroller>
	</s:BorderContainer>
	<s:CheckBox id="checkPimCheckBox" includeIn="packingBagState" x="43" y="147" label="检查PIM"
				selected="true"/>
	<s:CheckBox id="checkVnaCheckBox" includeIn="packingBagState" x="43" y="168" label="检查VNA"
				enabled="false" selected="true"/>
	<s:Label id="currentTime" includeIn="packingBagState" x="230" y="93" fontSize="12" text="今天是："/>
	<s:Label includeIn="packingBagState" x="39" y="333" width="968" color="#AFACAC"
			 text="_________________________________________________________________________________________________________________________________________"/>
	<s:Label includeIn="packingBagState" x="190" y="264" text="容积："/>
	<s:TextInput id="boxCountInput" includeIn="packingBagState" x="232" y="260" width="42"
				 enter.packingBagState="boxCountInput_enterHandler(event)"/>
	<s:Label includeIn="packingBagState" x="282" y="264" text="根/箱"/>
	<s:Button id="resetBtn" includeIn="packingBagState" x="881" y="142" width="60" height="31" label="重置"
			  chromeColor="#F80C0C"
			  click.packingBagState="resetBtn_clickHandler(event)"/>
	<s:Label includeIn="packingBagState" x="159" y="140" text="订单号"/>
	<s:Label includeIn="packingBagState" x="162" y="170" height="16" text="厂区"/>
	<s:Label includeIn="packingBagState" x="433" y="170" height="16" text="物料名称"/>
	<s:Label includeIn="packingBagState" x="152" y="198" height="16" text="物料编码"/>
	<s:Label includeIn="packingBagState" x="437" y="200" height="16" text="批次号"/>
	<s:Label includeIn="packingBagState" x="707" y="201" height="16" text="工单号"/>
	<s:TextInput id="orderNumInput"
				 includeIn="packingBagState" x="215" y="134" width="186"
				 enter.packingBagState="orderNumInput_enterHandler(event)"
				 />
	<s:TextInput id="factoryIdInput" includeIn="packingBagState" x="215" y="164" width="186"
				 enter.packingBagState="factoryIdInput_enterHandler(event)"
				 />
	<s:TextInput id="materielNameInput" includeIn="packingBagState" x="500" y="164" width="176"
				 enter.packingBagState="materielNameInput_enterHandler(event)"
				 />
	<s:TextInput id="materielNumInput" includeIn="packingBagState" x="215" y="194" width="186"
				 enter.packingBagState="materielNumInput_enterHandler(event)"
				 />
	<s:TextInput id="lotCodeInput" includeIn="packingBagState" x="500" y="195" width="176"
				 enter="lotCodeInput_enterHandler(event)"/>
	<s:TextInput id="jobNumInput" includeIn="packingBagState" x="758" y="196" width="176"
				 enter.packingBagState="jobNumInput_enterHandler(event)"
				 />
	<s:Label includeIn="packingBagState" x="433" y="139" text="产品型号"/>
	<s:ComboBox id="producttypeComboBox" includeIn="packingBagState" x="500" y="131" width="176"
				focusOut="producttypeComboBox_focusOutHandler(event)"
				change.packingBagState="producttypeComboBox_changeHandler(event)"
				dataProvider.packingBagState="{productTypeArray}"/>
	<s:Label includeIn="packingBagState" x="61" y="264" text="总箱数："/>
	<s:TextInput id="totalboxInput" includeIn="packingBagState" x="108" y="260" width="62"
				 enter.packingBagState="totalboxInput_enterHandler(event)"/>
	<mx:ProgressBar id="totalboxNumProgressBar" includeIn="packingBagState" x="655" y="254"
					mode="manual"
					width="323" height="30" label="完成箱数：0"
					labelPlacement="center"
				    barSkin="mx.skins.halo.ProgressBarSkin"
				    />
	<mx:ProgressBar id="packTotalProgressBar"
					includeIn="packingBagState" x="655" y="305"
					mode="manual"
					width="323" height="30" label="完成数量：0"
					labelPlacement="center"
					barSkin="mx.skins.halo.ProgressBarSkin"/>
	<s:Label id="trailDayLeft" includeIn="loginState,packingBagState" x="900" y="10" width="152"
			 height="22" backgroundColor="#011641" color="#B8E9FF" fontFamily="Rockwell Extra Bold"
			 fontSize="15" fontWeight="bold" textAlign="right" verticalAlign="middle"
			 x.loginState="846" y.loginState="10"/>
	
</s:WindowedApplication>
